version: '3.8'

services:
  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.15-enterprise
    container_name: novel_neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/novelprocessing2024
      - NEO4J_PLUGINS=["graph-data-science", "apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=gds.*,apoc.*
      - NEO4J_dbms_security_procedures_allowlist=gds.*,apoc.*
      - NEO4J_dbms_memory_heap_initial__size=2G
      - NEO4J_dbms_memory_heap_max__size=4G
      - NEO4J_dbms_memory_pagecache_size=2G
      - NEO4J_dbms_default__advertised__address=localhost
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      # Vector index configuration for embeddings
      - NEO4J_dbms_security_auth__enabled=true
      - NEO4J_dbms_connector_bolt_listen__address=0.0.0.0:7687
      - NEO4J_dbms_connector_http_listen__address=0.0.0.0:7474
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - novel_network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "novelprocessing2024", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Qdrant Vector Database (for embeddings and semantic search)
  qdrant:
    image: qdrant/qdrant:v1.7.3
    container_name: novel_qdrant
    ports:
      - "6333:6333"  # HTTP API
      - "6334:6334"  # gRPC API
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__STORAGE__PERFORMANCE__MAX_SEARCH_THREADS=4
    networks:
      - novel_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL (for backup and legacy compatibility)
  postgres:
    image: postgres:15-alpine
    container_name: novel_postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=novel_processing
      - POSTGRES_USER=novel_user
      - POSTGRES_PASSWORD=novel_pass_2024
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_postgres.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - novel_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U novel_user -d novel_processing"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: novel_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - novel_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # LangGraph Novel Processor Service
  langgraph_processor:
    build:
      context: .
      dockerfile: Dockerfile.langgraph-processor
    container_name: novel_langgraph_processor
    depends_on:
      neo4j:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=novelprocessing2024
      - QDRANT_URL=http://qdrant:6333
      - REDIS_URL=redis://redis:6379
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - PROCESSING_MODE=comprehensive
      - BATCH_SIZE=10
      - MAX_WORKERS=4
      - LOG_LEVEL=INFO
    volumes:
      - ./processors:/app/processors
      - ./logs:/app/logs
      - processing_cache:/app/cache
    networks:
      - novel_network
    restart: unless-stopped

  # API Server with Enhanced Capabilities
  api_server:
    build:
      context: .
      dockerfile: Dockerfile.enhanced-api
    container_name: novel_api_server
    ports:
      - "5000:5000"
    depends_on:
      - langgraph_processor
      - neo4j
      - redis
    environment:
      - FLASK_ENV=production
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=novelprocessing2024
      - REDIS_URL=redis://redis:6379
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - API_RATE_LIMIT=100
      - CACHE_TTL=3600
    volumes:
      - ./logs:/app/logs
    networks:
      - novel_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Discord Bot (Enhanced)
  discord_bot:
    build:
      context: .
      dockerfile: Dockerfile.enhanced-discord
    container_name: novel_discord_bot
    depends_on:
      - api_server
    environment:
      - DISCORD_TOKEN=${DISCORD_TOKEN}
      - API_BASE_URL=http://api_server:5000
      - NODE_ENV=production
      - LOG_LEVEL=info
      - COMMAND_COOLDOWN=5
      - MAX_MESSAGE_LENGTH=2000
    volumes:
      - ./logs:/app/logs
    networks:
      - novel_network
    restart: unless-stopped

  # Graph Analytics Service
  graph_analytics:
    build:
      context: .
      dockerfile: Dockerfile.graph-analytics
    container_name: novel_graph_analytics
    depends_on:
      neo4j:
        condition: service_healthy
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=novelprocessing2024
      - ANALYTICS_SCHEDULE=0 */6 * * *  # Every 6 hours
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./analytics_output:/app/output
      - ./logs:/app/logs
    networks:
      - novel_network
    restart: unless-stopped

  # Monitoring and Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: novel_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - novel_network

  grafana:
    image: grafana/grafana:latest
    container_name: novel_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/dashboards:/var/lib/grafana/dashboards
    networks:
      - novel_network

volumes:
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  qdrant_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  processing_cache:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  novel_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16